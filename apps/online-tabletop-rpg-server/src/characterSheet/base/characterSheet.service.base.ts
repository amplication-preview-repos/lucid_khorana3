/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CharacterSheet as PrismaCharacterSheet } from "@prisma/client";

export class CharacterSheetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CharacterSheetCountArgs, "select">
  ): Promise<number> {
    return this.prisma.characterSheet.count(args);
  }

  async characterSheets<T extends Prisma.CharacterSheetFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CharacterSheetFindManyArgs>
  ): Promise<PrismaCharacterSheet[]> {
    return this.prisma.characterSheet.findMany<Prisma.CharacterSheetFindManyArgs>(
      args
    );
  }
  async characterSheet<T extends Prisma.CharacterSheetFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CharacterSheetFindUniqueArgs>
  ): Promise<PrismaCharacterSheet | null> {
    return this.prisma.characterSheet.findUnique(args);
  }
  async createCharacterSheet<T extends Prisma.CharacterSheetCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CharacterSheetCreateArgs>
  ): Promise<PrismaCharacterSheet> {
    return this.prisma.characterSheet.create<T>(args);
  }
  async updateCharacterSheet<T extends Prisma.CharacterSheetUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CharacterSheetUpdateArgs>
  ): Promise<PrismaCharacterSheet> {
    return this.prisma.characterSheet.update<T>(args);
  }
  async deleteCharacterSheet<T extends Prisma.CharacterSheetDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CharacterSheetDeleteArgs>
  ): Promise<PrismaCharacterSheet> {
    return this.prisma.characterSheet.delete(args);
  }
}
