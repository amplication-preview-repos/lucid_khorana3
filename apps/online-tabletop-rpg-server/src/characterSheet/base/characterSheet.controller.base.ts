/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CharacterSheetService } from "../characterSheet.service";
import { CharacterSheetCreateInput } from "./CharacterSheetCreateInput";
import { CharacterSheet } from "./CharacterSheet";
import { CharacterSheetFindManyArgs } from "./CharacterSheetFindManyArgs";
import { CharacterSheetWhereUniqueInput } from "./CharacterSheetWhereUniqueInput";
import { CharacterSheetUpdateInput } from "./CharacterSheetUpdateInput";

export class CharacterSheetControllerBase {
  constructor(protected readonly service: CharacterSheetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CharacterSheet })
  async createCharacterSheet(
    @common.Body() data: CharacterSheetCreateInput
  ): Promise<CharacterSheet> {
    return await this.service.createCharacterSheet({
      data: data,
      select: {
        assignedUser: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CharacterSheet] })
  @ApiNestedQuery(CharacterSheetFindManyArgs)
  async characterSheets(
    @common.Req() request: Request
  ): Promise<CharacterSheet[]> {
    const args = plainToClass(CharacterSheetFindManyArgs, request.query);
    return this.service.characterSheets({
      ...args,
      select: {
        assignedUser: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CharacterSheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async characterSheet(
    @common.Param() params: CharacterSheetWhereUniqueInput
  ): Promise<CharacterSheet | null> {
    const result = await this.service.characterSheet({
      where: params,
      select: {
        assignedUser: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CharacterSheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCharacterSheet(
    @common.Param() params: CharacterSheetWhereUniqueInput,
    @common.Body() data: CharacterSheetUpdateInput
  ): Promise<CharacterSheet | null> {
    try {
      return await this.service.updateCharacterSheet({
        where: params,
        data: data,
        select: {
          assignedUser: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CharacterSheet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCharacterSheet(
    @common.Param() params: CharacterSheetWhereUniqueInput
  ): Promise<CharacterSheet | null> {
    try {
      return await this.service.deleteCharacterSheet({
        where: params,
        select: {
          assignedUser: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
