/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CharacterSheet } from "./CharacterSheet";
import { CharacterSheetCountArgs } from "./CharacterSheetCountArgs";
import { CharacterSheetFindManyArgs } from "./CharacterSheetFindManyArgs";
import { CharacterSheetFindUniqueArgs } from "./CharacterSheetFindUniqueArgs";
import { CreateCharacterSheetArgs } from "./CreateCharacterSheetArgs";
import { UpdateCharacterSheetArgs } from "./UpdateCharacterSheetArgs";
import { DeleteCharacterSheetArgs } from "./DeleteCharacterSheetArgs";
import { CharacterSheetService } from "../characterSheet.service";
@graphql.Resolver(() => CharacterSheet)
export class CharacterSheetResolverBase {
  constructor(protected readonly service: CharacterSheetService) {}

  async _characterSheetsMeta(
    @graphql.Args() args: CharacterSheetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CharacterSheet])
  async characterSheets(
    @graphql.Args() args: CharacterSheetFindManyArgs
  ): Promise<CharacterSheet[]> {
    return this.service.characterSheets(args);
  }

  @graphql.Query(() => CharacterSheet, { nullable: true })
  async characterSheet(
    @graphql.Args() args: CharacterSheetFindUniqueArgs
  ): Promise<CharacterSheet | null> {
    const result = await this.service.characterSheet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CharacterSheet)
  async createCharacterSheet(
    @graphql.Args() args: CreateCharacterSheetArgs
  ): Promise<CharacterSheet> {
    return await this.service.createCharacterSheet({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CharacterSheet)
  async updateCharacterSheet(
    @graphql.Args() args: UpdateCharacterSheetArgs
  ): Promise<CharacterSheet | null> {
    try {
      return await this.service.updateCharacterSheet({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CharacterSheet)
  async deleteCharacterSheet(
    @graphql.Args() args: DeleteCharacterSheetArgs
  ): Promise<CharacterSheet | null> {
    try {
      return await this.service.deleteCharacterSheet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
