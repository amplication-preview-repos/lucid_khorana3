/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CombatGridService } from "../combatGrid.service";
import { CombatGridCreateInput } from "./CombatGridCreateInput";
import { CombatGrid } from "./CombatGrid";
import { CombatGridFindManyArgs } from "./CombatGridFindManyArgs";
import { CombatGridWhereUniqueInput } from "./CombatGridWhereUniqueInput";
import { CombatGridUpdateInput } from "./CombatGridUpdateInput";

export class CombatGridControllerBase {
  constructor(protected readonly service: CombatGridService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CombatGrid })
  async createCombatGrid(
    @common.Body() data: CombatGridCreateInput
  ): Promise<CombatGrid> {
    return await this.service.createCombatGrid({
      data: {
        ...data,

        room: data.room
          ? {
              connect: data.room,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        room: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CombatGrid] })
  @ApiNestedQuery(CombatGridFindManyArgs)
  async combatGrids(@common.Req() request: Request): Promise<CombatGrid[]> {
    const args = plainToClass(CombatGridFindManyArgs, request.query);
    return this.service.combatGrids({
      ...args,
      select: {
        createdAt: true,
        id: true,

        room: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CombatGrid })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async combatGrid(
    @common.Param() params: CombatGridWhereUniqueInput
  ): Promise<CombatGrid | null> {
    const result = await this.service.combatGrid({
      where: params,
      select: {
        createdAt: true,
        id: true,

        room: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CombatGrid })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCombatGrid(
    @common.Param() params: CombatGridWhereUniqueInput,
    @common.Body() data: CombatGridUpdateInput
  ): Promise<CombatGrid | null> {
    try {
      return await this.service.updateCombatGrid({
        where: params,
        data: {
          ...data,

          room: data.room
            ? {
                connect: data.room,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          room: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CombatGrid })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCombatGrid(
    @common.Param() params: CombatGridWhereUniqueInput
  ): Promise<CombatGrid | null> {
    try {
      return await this.service.deleteCombatGrid({
        where: params,
        select: {
          createdAt: true,
          id: true,

          room: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
