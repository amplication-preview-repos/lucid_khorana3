/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CombatGrid as PrismaCombatGrid,
  Room as PrismaRoom,
} from "@prisma/client";

export class CombatGridServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CombatGridCountArgs, "select">
  ): Promise<number> {
    return this.prisma.combatGrid.count(args);
  }

  async combatGrids<T extends Prisma.CombatGridFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CombatGridFindManyArgs>
  ): Promise<PrismaCombatGrid[]> {
    return this.prisma.combatGrid.findMany<Prisma.CombatGridFindManyArgs>(args);
  }
  async combatGrid<T extends Prisma.CombatGridFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CombatGridFindUniqueArgs>
  ): Promise<PrismaCombatGrid | null> {
    return this.prisma.combatGrid.findUnique(args);
  }
  async createCombatGrid<T extends Prisma.CombatGridCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CombatGridCreateArgs>
  ): Promise<PrismaCombatGrid> {
    return this.prisma.combatGrid.create<T>(args);
  }
  async updateCombatGrid<T extends Prisma.CombatGridUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CombatGridUpdateArgs>
  ): Promise<PrismaCombatGrid> {
    return this.prisma.combatGrid.update<T>(args);
  }
  async deleteCombatGrid<T extends Prisma.CombatGridDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CombatGridDeleteArgs>
  ): Promise<PrismaCombatGrid> {
    return this.prisma.combatGrid.delete(args);
  }

  async getRoom(parentId: string): Promise<PrismaRoom | null> {
    return this.prisma.combatGrid
      .findUnique({
        where: { id: parentId },
      })
      .room();
  }
}
