/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CombatGrid } from "./CombatGrid";
import { CombatGridCountArgs } from "./CombatGridCountArgs";
import { CombatGridFindManyArgs } from "./CombatGridFindManyArgs";
import { CombatGridFindUniqueArgs } from "./CombatGridFindUniqueArgs";
import { CreateCombatGridArgs } from "./CreateCombatGridArgs";
import { UpdateCombatGridArgs } from "./UpdateCombatGridArgs";
import { DeleteCombatGridArgs } from "./DeleteCombatGridArgs";
import { Room } from "../../room/base/Room";
import { CombatGridService } from "../combatGrid.service";
@graphql.Resolver(() => CombatGrid)
export class CombatGridResolverBase {
  constructor(protected readonly service: CombatGridService) {}

  async _combatGridsMeta(
    @graphql.Args() args: CombatGridCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CombatGrid])
  async combatGrids(
    @graphql.Args() args: CombatGridFindManyArgs
  ): Promise<CombatGrid[]> {
    return this.service.combatGrids(args);
  }

  @graphql.Query(() => CombatGrid, { nullable: true })
  async combatGrid(
    @graphql.Args() args: CombatGridFindUniqueArgs
  ): Promise<CombatGrid | null> {
    const result = await this.service.combatGrid(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CombatGrid)
  async createCombatGrid(
    @graphql.Args() args: CreateCombatGridArgs
  ): Promise<CombatGrid> {
    return await this.service.createCombatGrid({
      ...args,
      data: {
        ...args.data,

        room: args.data.room
          ? {
              connect: args.data.room,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CombatGrid)
  async updateCombatGrid(
    @graphql.Args() args: UpdateCombatGridArgs
  ): Promise<CombatGrid | null> {
    try {
      return await this.service.updateCombatGrid({
        ...args,
        data: {
          ...args.data,

          room: args.data.room
            ? {
                connect: args.data.room,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CombatGrid)
  async deleteCombatGrid(
    @graphql.Args() args: DeleteCombatGridArgs
  ): Promise<CombatGrid | null> {
    try {
      return await this.service.deleteCombatGrid(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Room, {
    nullable: true,
    name: "room",
  })
  async getRoom(@graphql.Parent() parent: CombatGrid): Promise<Room | null> {
    const result = await this.service.getRoom(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
